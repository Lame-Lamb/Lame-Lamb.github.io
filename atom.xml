<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lame Lamb</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lame-lamb.github.io/"/>
  <updated>2019-09-22T10:36:25.425Z</updated>
  <id>https://lame-lamb.github.io/</id>
  
  <author>
    <name>Lame Lamb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分查找及其变种(转)</title>
    <link href="https://lame-lamb.github.io/2019/09/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8F%8A%E5%85%B6%E5%8F%98%E7%A7%8D/"/>
    <id>https://lame-lamb.github.io/2019/09/22/二分查找及其变种/</id>
    <published>2019-09-22T09:57:55.000Z</published>
    <updated>2019-09-22T10:36:25.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你真的会写二分查找吗"><a href="#你真的会写二分查找吗" class="headerlink" title="你真的会写二分查找吗"></a><a href="https://www.cnblogs.com/luoxn28/p/5767571.html" target="_blank" rel="noopener">你真的会写二分查找吗</a></h1><h1 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1 二分查找"></a>1 二分查找</h1><a id="more"></a><p>二分查找是一个基础的算法，也是面试中常考的一个知识点。二分查找就是将查找的键和子数组的中间键作比较，如果被查找的键小于中间键，就在左子数组继续查找；如果大于中间键，就在右子数组中查找，否则中间键就是要找的元素。</p><p><img src="https://images2015.cnblogs.com/blog/772134/201608/772134-20160813105218234-296133868.png" alt></p><p>（图片来自《算法-第4版》）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 二分查找，找到该值在数组中的下标，否则为-1</span><br><span class="line"> */</span><br><span class="line">static int binarySearch(int[] array, int key) &#123;</span><br><span class="line">    //若array没有排序，请先排序</span><br><span class="line">    System.out.println(&quot;排序前：&quot; + Arrays.toString(array));</span><br><span class="line">    Arrays.sort(array);</span><br><span class="line">    System.out.println(&quot;排序后：&quot; + Arrays.toString(array));</span><br><span class="line"> </span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = array.length - 1;</span><br><span class="line"> </span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (array[mid] == key) &#123;</span><br><span class="line">            return mid;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (array[mid] &lt; key) &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次移动left和right指针的时候，需要在mid的基础上+1或者-1， 防止出现死循环， 程序也就能够正确的运行。</p><p>注意：代码中的判断条件必须是while (left &lt;= right)，否则的话判断条件不完整，比如：array[3] = {1, 3, 5};待查找的键为5，此时在(low &lt; high)条件下就会找不到，因为low和high相等时，指向元素5，但是此时条件不成立，没有进入while()中。</p><h1 id="2-二分查找的变种"><a href="#2-二分查找的变种" class="headerlink" title="2 二分查找的变种"></a>2 二分查找的变种</h1><p>关于二分查找，如果条件稍微变换一下，比如：数组之中的<strong>数据可能可以重复</strong>，要求返回匹配的数据的最小（或最大）的下标；更近一步，需要找出数组中<strong>第一个大于key的元素</strong>（也就是最小的大于key的元素的）下标，等等。这些，虽然只有一点点的变化，实现的时候确实要更加的细心。</p><p>二分查找的变种和二分查找原理一样，主要就是变换判断条件（也就是边界条件），如果想直接看如何记忆这些变种的窍门，请直接翻到本文最后。下面来看几种二分查找变种的代码：</p><h2 id="2-1-查找第一个与key相等的元素"><a href="#2-1-查找第一个与key相等的元素" class="headerlink" title="2.1 查找第一个与key相等的元素"></a>2.1 查找第一个与key相等的元素</h2><p>查找第一个相等的元素，也就是说等于查找key值的元素有好多个，返回这些元素最左边的元素下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 查找第一个相等的元素</span><br><span class="line">static int findFirstEqual(int[] array, int key) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = array.length - 1;</span><br><span class="line"> </span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (array[mid] &gt;= key) &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (left &lt; array.length &amp;&amp; array[left] == key) &#123;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-查找最后一个与key相等的元素"><a href="#2-2-查找最后一个与key相等的元素" class="headerlink" title="2.2 查找最后一个与key相等的元素"></a>2.2 查找最后一个与key相等的元素</h2><p>查找最后一个相等的元素，也就是说等于查找key值的元素有好多个，返回这些元素最右边的元素下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 查找最后一个相等的元素</span><br><span class="line">static int findLastEqual(int[] array, int key) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = array.length - 1;</span><br><span class="line"> </span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (array[mid] &gt; key) &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (right &gt;= 0 &amp;&amp; array[right] == key) &#123;</span><br><span class="line">        return right;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-查找最后一个等于或者小于key的元素"><a href="#2-3-查找最后一个等于或者小于key的元素" class="headerlink" title="2.3 查找最后一个等于或者小于key的元素"></a>2.3 查找最后一个等于或者小于key的元素</h2><p>查找最后一个等于或者小于key的元素，也就是说等于key值的元素有好多个，返回这些元素最右边的元素下标；如果没有等于key值的元素，则返回小于key的最右边元素下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 查找最后一个等于或者小于key的元素</span><br><span class="line">static int findLastEqualSmaller(int[] array, int key) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = array.length - 1;</span><br><span class="line"> </span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (array[mid] &gt; key) &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-查找最后一个小于key的元素"><a href="#2-4-查找最后一个小于key的元素" class="headerlink" title="2.4 查找最后一个小于key的元素"></a>2.4 查找最后一个小于key的元素</h2><p>查找最后一个小于key的元素，也就是说返回小于key的最右边元素下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 查找最后一个小于key的元素</span><br><span class="line">static int findLastSmaller(int[] array, int key) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = array.length - 1;</span><br><span class="line"> </span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (array[mid] &gt;= key) &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-查找第一个等于或者大于key的元素"><a href="#2-5-查找第一个等于或者大于key的元素" class="headerlink" title="2.5 查找第一个等于或者大于key的元素"></a>2.5 查找第一个等于或者大于key的元素</h2><p>查找第一个等于或者大于key的元素，也就是说等于key值的元素有好多个，返回这些元素最左边的元素下标；如果没有等于key值的元素，则返回大于key的最左边元素下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 查找第一个等于或者大于key的元素</span><br><span class="line">static int findFirstEqualLarger(int[] array, int key) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = array.length - 1;</span><br><span class="line"> </span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (array[mid] &gt;= key) &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-查找第一个大于key的元素"><a href="#2-6-查找第一个大于key的元素" class="headerlink" title="2.6 查找第一个大于key的元素"></a>2.6 查找第一个大于key的元素</h2><p>查找第一个等于key的元素，也就是说返回大于key的最左边元素下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 查找第一个大于key的元素</span><br><span class="line">static int findFirstLarger(int[] array, int key) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = array.length - 1;</span><br><span class="line"> </span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (array[mid] &gt; key) &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return left;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3 二分查找变种总结</span><br></pre></td></tr></table></figure><p>// 这里必须是 &lt;=<br>while (left &lt;= right) {<br>    int mid = (left + right) / 2;<br>    if (array[mid] ? key) {<br>        //… right = mid - 1;<br>    }<br>    else {<br>        // … left = mid + 1;<br>    }<br>}<br>return xxx;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">二分查找变种较多，不过它们的“套路”是一样的，以上代码就是其套路，如何快速写出二分查找的代码，只需按照以下步骤即可：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1 首先判断出是返回left，还是返回right</span><br><span class="line"></span><br><span class="line">因为我们知道最后跳出while (left &lt;= right)循环条件是right &lt; left，且right = left - 1。最后right和left一定是卡在&quot;边界值&quot;的左右两边，如果是比较值为key，查找小于等于（或者是小于）key的元素，则边界值就是等于key的所有元素的最左边那个，其实应该返回left。</span><br><span class="line"></span><br><span class="line">以数组&#123;1, 2, 3, 3, 4, 5&#125;为例，如果需要查找第一个等于或者小于3的元素下标，我们比较的key值是3，则最后left和right需要满足以下条件：</span><br><span class="line"></span><br><span class="line">![](https://images2015.cnblogs.com/blog/772134/201608/772134-20160813153101328-934983178.png)</span><br><span class="line"></span><br><span class="line">我们比较的key值是3，所以此时我们需要返回left。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 2 判断出比较符号</span><br></pre></td></tr></table></figure><p>int mid = (left + right) / 2;<br>if (array[mid] ? key) {<br>    //… right = xxx;<br>}<br>else {<br>    // … left = xxx;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">也就是这里的 if (array[mid] ? key) 中的判断符号，结合步骤1和给出的条件，如果是查找小于等于key的元素，因为是要返回left，所以array[mid]等于或者大于key，就应该使用&gt;=，以下是完整代码：</span><br></pre></td></tr></table></figure><p>// 查找小于等于key的元素<br>int mid = (left + right) / 2;<br>if (array[mid] &gt;= key) {<br>    right = mid - 1;<br>}<br>else {<br>    left = mid + 1;<br>}<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;你真的会写二分查找吗&quot;&gt;&lt;a href=&quot;#你真的会写二分查找吗&quot; class=&quot;headerlink&quot; title=&quot;你真的会写二分查找吗&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/luoxn28/p/5767571.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;你真的会写二分查找吗&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;1-二分查找&quot;&gt;&lt;a href=&quot;#1-二分查找&quot; class=&quot;headerlink&quot; title=&quot;1 二分查找&quot;&gt;&lt;/a&gt;1 二分查找&lt;/h1&gt;
    
    </summary>
    
    
      <category term="算法 二分查找" scheme="https://lame-lamb.github.io/tags/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Synchronized(转)</title>
    <link href="https://lame-lamb.github.io/2019/09/19/Synchronized/"/>
    <id>https://lame-lamb.github.io/2019/09/19/Synchronized/</id>
    <published>2019-09-19T10:56:00.000Z</published>
    <updated>2019-09-22T10:37:26.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="让你彻底理解Synchronized"><a href="#让你彻底理解Synchronized" class="headerlink" title="让你彻底理解Synchronized"></a>让你彻底理解Synchronized</h1><h1 id="1-synchronized简介"><a href="#1-synchronized简介" class="headerlink" title="1. synchronized简介"></a>1. synchronized简介</h1><a id="more"></a><p>在学习知识前，我们先来看一个现象：</p><pre><code>public class SynchronizedDemo implements Runnable {    private static int count = 0;    public static void main(String[] args) {        for (int i = 0; i &lt; 10; i++) {            Thread thread = new Thread(new SynchronizedDemo());            thread.start();        }        try {            Thread.sleep(500);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println(&quot;result: &quot; + count);    }    @Override    public void run() {        for (int i = 0; i &lt; 1000000; i++)            count++;    }}</code></pre><p>开启了10个线程，每个线程都累加了1000000次，如果结果正确的话自然而然总数就应该是10 * 1000000 = 10000000。可就运行多次结果都不是这个数，而且每次运行结果都不一样。这是为什么了？有什么解决方案了？这就是我们今天要聊的事情。</p><p>在上一篇博文中我们已经了解了<a href="https://www.jianshu.com/p/d52fea0d6ba5" target="_blank" rel="noopener">java内存模型</a>的一些知识，并且已经知道出现线程安全的主要来源于JMM的设计，主要集中在主内存和线程的工作内存而导致的<strong>内存可见性问题</strong>，以及<strong>重排序导致的问题</strong>，进一步知道了<strong>happens-before规则</strong>。线程运行时拥有自己的栈空间，会在自己的栈空间运行，如果多线程间没有共享的数据也就是说多线程间并没有协作完成一件事情，那么，多线程就不能发挥优势，不能带来巨大的价值。那么共享数据的线程安全问题怎样处理？很自然而然的想法就是每一个线程依次去读写这个共享变量，这样就不会有任何数据安全的问题，因为每个线程所操作的都是当前最新的版本数据。那么，在java关键字synchronized就具有使每个线程依次排队操作共享变量的功能。很显然，这种同步机制效率很低，但synchronized是其他并发容器实现的基础，对它的理解也会大大提升对并发编程的感觉。</p><h1 id="2-synchronized实现原理"><a href="#2-synchronized实现原理" class="headerlink" title="2. synchronized实现原理"></a>2. synchronized实现原理</h1><p>在java代码中使用synchronized可是使用在代码块和方法中，根据Synchronized用的位置可以有这些使用场景：  </p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-08f16aeac7e0977d.png" alt="Synchronized的使用场景"></p><p>如图，synchronized可以用在<strong>方法</strong>上也可以使用在<strong>代码块</strong>中，其中方法是实例方法和静态方法分别锁的是该类的实例对象和该类的对象。而使用在代码块中也可以分为三种，具体的可以看上面的表格。这里的需要注意的是：<strong>如果锁的是类对象的话，尽管new多个实例对象，但他们仍然是属于同一个类依然会被锁住，即线程之间保证同步关系</strong>。</p><p>现在我们已经知道了怎样synchronized了，看起来很简单，synchronized底层是怎样实现的呢？</p><h2 id="2-1-对象锁（monitor）机制"><a href="#2-1-对象锁（monitor）机制" class="headerlink" title="2.1 对象锁（monitor）机制"></a>2.1 对象锁（monitor）机制</h2><p>现在我们来看看synchronized的具体底层实现。先写一个简单的demo:</p><pre><code>public class SynchronizedDemo {    public static void main(String[] args) {        synchronized (SynchronizedDemo.class) {        }        method();    }    private static void method() {    }}</code></pre><p>上面的代码中有一个同步代码块，锁住的是类对象，并且还有一个同步静态方法，锁住的依然是该类的类对象。编译之后，切换到SynchronizedDemo.class的同级目录之后，然后用<strong>javap -v SynchronizedDemo.class</strong>查看字节码文件：  </p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-10e9e5d556d5214d.png" alt="SynchronizedDemo.class"></p><p>如图，上面用黄色高亮的部分就是需要注意的部分了，这也是添Synchronized关键字之后独有的。执行同步代码块后首先要先执行<strong>monitorenter</strong>指令，退出的时候<strong>monitorexit</strong>指令。通过分析之后可以看出，使用Synchronized进行同步，其关键就是必须要对对象的监视器monitor进行获取，当线程获取monitor后才能继续往下执行，否则就只能等待。而这个获取的过程是<strong>互斥</strong>的，即同一时刻只有一个线程能够获取到monitor。上面的demo中在执行完同步代码块之后紧接着再会去执行一个静态同步方法，而这个方法锁的对象依然就这个类对象，那么这个正在执行的线程还需要获取该锁吗？答案是不必的，从上图中就可以看出来，执行静态同步方法的时候就只有一条monitorexit指令，并没有monitorenter获取锁的指令。这就是<strong>锁的重入性</strong>，即在同一锁程中，线程不需要再次获取同一把锁。Synchronized先天具有重入性。<strong>每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一</strong>。</p><p>任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获取该对象的监视器才能进入同步块和同步方法，如果没有获取到监视器的线程将会被阻塞在同步块和同步方法的入口处，进入到BLOCKED状态（关于线程的状态可以看<a href="https://www.jianshu.com/p/f65ea68a4a7f" target="_blank" rel="noopener">这篇文章</a>）</p><p>下图表现了对象，对象监视器，同步队列以及执行线程状态之间的关系：</p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-58bf5739c7c49c05.png" alt="对象，对象监视器，同步队列和线程状态的关系"></p><p>该图可以看出，任意线程对Object的访问，首先要获得Object的监视器，如果获取失败，该线程就进入同步状态，线程状态变为BLOCKED，当Object的监视器占有者释放后，在同步队列中得线程就会有机会重新获取该监视器。</p><h2 id="2-2-synchronized的happens-before关系"><a href="#2-2-synchronized的happens-before关系" class="headerlink" title="2.2 synchronized的happens-before关系"></a>2.2 synchronized的happens-before关系</h2><p>在上一篇文章中讨论过<a href="https://www.jianshu.com/p/d52fea0d6ba5" target="_blank" rel="noopener">happens-before</a>规则，抱着学以致用的原则我们现在来看一看Synchronized的happens-before规则，即监视器锁规则：对同一个监视器的解锁，happens-before于对该监视器的加锁。继续来看代码：</p><pre><code>public class MonitorDemo {    private int a = 0;    public synchronized void writer() {     // 1        a++;                                // 2    }                                       // 3    public synchronized void reader() {    // 4        int i = a;                         // 5    }                                      // 6}</code></pre><p>该代码的happens-before关系如图所示：<br><img src="https://upload-images.jianshu.io/upload_images/2615789-d025c6be230f72a2.png" alt="Synchronized的happens-before关系"></p><p>在图中每一个箭头连接的两个节点就代表之间的happens-before关系，黑色的是通过程序顺序规则推导出来，红色的为监视器锁规则推导而出：<strong>线程A释放锁happens-before线程B加锁</strong>，蓝色的则是通过程序顺序规则和监视器锁规则推测出来happens-before关系，通过传递性规则进一步推导的happens-before关系。现在我们来重点关注2 happens-before 5，通过这个关系我们可以得出什么？</p><p>根据happens-before的定义中的一条:如果A happens-before B，则A的执行结果对B可见，并且A的执行顺序先于B。线程A先对共享变量A进行加一，由2 happens-before 5关系可知线程A的执行结果对线程B可见即线程B所读取到的a的值为1。</p><h2 id="2-3-锁获取和锁释放的内存语义"><a href="#2-3-锁获取和锁释放的内存语义" class="headerlink" title="2.3 锁获取和锁释放的内存语义"></a>2.3 锁获取和锁释放的内存语义</h2><p>在上一篇文章提到过JMM核心为两个部分：happens-before规则以及内存抽象模型。我们分析完Synchronized的happens-before关系后，还是不太完整的，我们接下来看看基于java内存抽象模型的Synchronized的内存语义。</p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-8faace4c9e651d6e.png" alt="线程A写共享变量"></p><p>从上图可以看出，线程A会首先先从主内存中读取共享变量a=0的值然后将该变量拷贝到自己的本地内存，进行加一操作后，再将该值刷新到主内存，整个过程即为线程A 加锁–&gt;执行临界区代码–&gt;释放锁相对应的内存语义。</p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-540462b1425e38d4.png" alt="线程B读共享变量"></p><p>线程B获取锁的时候同样会从主内存中共享变量a的值，这个时候就是最新的值1,然后将该值拷贝到线程B的工作内存中去，释放锁的时候同样会重写到主内存中。</p><p>从整体上来看，线程A的执行结果（a=1）对线程B是可见的，实现原理为：释放锁的时候会将值刷新到主内存中，其他线程获取锁时会强制从主内存中获取最新的值。另外也验证了2 happens-before 5，2的执行结果对5是可见的。</p><p>从横向来看，这就像线程A通过主内存中的共享变量和线程B进行通信，A 告诉 B 我们俩的共享数据现在为1啦，这种线程间的通信机制正好吻合java的内存模型正好是共享内存的并发模型结构。</p><h1 id="3-synchronized优化"><a href="#3-synchronized优化" class="headerlink" title="3. synchronized优化"></a>3. synchronized优化</h1><p>通过上面的讨论现在我们对Synchronized应该有所印象了，它最大的特征就是在同一时刻只有一个线程能够获得对象的监视器（monitor），从而进入到同步代码块或者同步方法之中，即表现为<strong>互斥性（排它性）</strong>。这种方式肯定效率低下，每次只能通过一个线程，既然每次只能通过一个，这种形式不能改变的话，那么我们能不能让每次通过的速度变快一点了。打个比方，去收银台付款，之前的方式是，大家都去排队，然后去纸币付款收银员找零，有的时候付款的时候在包里拿出钱包再去拿出钱，这个过程是比较耗时的，然后，支付宝解放了大家去钱包找钱的过程，现在只需要扫描下就可以完成付款了，也省去了收银员跟你找零的时间的了。同样是需要排队，但整个付款的时间大大缩短，是不是整体的效率变高速率变快了？这种优化方式同样可以引申到锁优化上，缩短获取锁的时间，伟大的科学家们也是这样做的，令人钦佩，毕竟java是这么优秀的语言。</p><p>在聊到锁的优化也就是锁的几种状态前，有两个知识点需要先关注：（1）CAS操作 （2）Java对象头，这是理解下面知识的前提条件。</p><h2 id="3-1-CAS操作"><a href="#3-1-CAS操作" class="headerlink" title="3.1 CAS操作"></a>3.1 CAS操作</h2><h3 id="3-1-1-什么是CAS"><a href="#3-1-1-什么是CAS" class="headerlink" title="3.1.1 什么是CAS?"></a>3.1.1 什么是CAS?</h3><p>使用锁时，线程获取锁是一种<strong>悲观锁策略</strong>，即假设每一次执行临界区代码都会产生冲突，所以当前线程获取到锁的时候同时也会阻塞其他线程获取该锁。而CAS操作（又称为无锁操作）是一种<strong>乐观锁策略</strong>，它假设所有线程访问共享资源的时候不会出现冲突，既然不会出现冲突自然而然就不会阻塞其他线程的操作。因此，线程就不会出现阻塞停顿的状态。那么，如果出现冲突了怎么办？无锁操作是使用<strong>CAS(compare and swap)</strong>又叫做比较交换来鉴别线程是否出现冲突，出现冲突就重试当前操作直到没有冲突为止。</p><h3 id="3-1-2-CAS的操作过程"><a href="#3-1-2-CAS的操作过程" class="headerlink" title="3.1.2 CAS的操作过程"></a>3.1.2 CAS的操作过程</h3><p>CAS比较交换的过程可以通俗的理解为CAS(V,O,N)，包含三个值分别为：<strong>V 内存地址存放的实际值；O 预期的值（旧值）；N 更新的新值</strong>。当V和O相同时，也就是说旧值和内存中实际的值相同表明该值没有被其他线程更改过，即该旧值O就是目前来说最新的值了，自然而然可以将新值N赋值给V。反之，V和O不相同，表明该值已经被其他线程改过了则该旧值O不是最新版本的值了，所以不能将新值N赋给V，返回V即可。当多个线程使用CAS操作一个变量时，只有一个线程会成功，并成功更新，其余会失败。失败的线程会重新尝试，当然也可以选择挂起线程</p><p>CAS的实现需要硬件指令集的支撑，在JDK1.5后虚拟机才可以使用处理器提供的<strong>CMPXCHG</strong>指令实现。</p><blockquote><p>Synchronized VS CAS</p></blockquote><p>元老级的Synchronized(未优化前)最主要的问题是：在存在线程竞争的情况下会出现线程阻塞和唤醒锁带来的性能问题，因为这是一种互斥同步（阻塞同步）。而CAS并不是武断的间线程挂起，当CAS操作失败后会进行一定的尝试，而非进行耗时的挂起唤醒的操作，因此也叫做非阻塞同步。这是两者主要的区别。</p><h3 id="3-1-3-CAS的应用场景"><a href="#3-1-3-CAS的应用场景" class="headerlink" title="3.1.3 CAS的应用场景"></a>3.1.3 CAS的应用场景</h3><p>在J.U.C包中利用CAS实现类有很多，可以说是支撑起整个concurrency包的实现，在Lock实现中会有CAS改变state变量，在atomic包中的实现类也几乎都是用CAS实现，关于这些具体的实现场景在之后会详细聊聊。</p><h3 id="3-1-4-CAS的问题"><a href="#3-1-4-CAS的问题" class="headerlink" title="3.1.4 CAS的问题"></a>3.1.4 CAS的问题</h3><p><strong>1. ABA问题</strong><br>因为CAS会检查旧值有没有变化，这里存在这样一个有意思的问题。比如一个旧值A变为了成B，然后再变成A，刚好在做CAS时检查发现旧值并没有变化依然为A，但是实际上的确发生了变化。解决方案可以沿袭数据库中常用的乐观锁方式，添加一个版本号可以解决。原来的变化路径A-&gt;B-&gt;A就变成了1A-&gt;2B-&gt;3C。java这么优秀的语言，当然在java 1.5后的atomic包中提供了AtomicStampedReference来解决ABA问题，解决思路就是这样的。</p><p><strong>2. 自旋时间过长</strong></p><p>使用CAS时非阻塞同步，也就是说不会将线程挂起，会自旋（无非就是一个死循环）进行下一次尝试，如果这里自旋时间过长对性能是很大的消耗。如果JVM能支持处理器提供的pause指令，那么在效率上会有一定的提升。</p><p><strong>3. 只能保证一个共享变量的原子操作</strong></p><p>当对一个共享变量执行操作时CAS能保证其原子性，如果对多个共享变量进行操作,CAS就不能保证其原子性。有一个解决方案是利用对象整合多个共享变量，即一个类中的成员变量就是这几个共享变量。然后将这个对象做CAS操作就可以保证其原子性。atomic中提供了AtomicReference来保证引用对象之间的原子性。</p><h2 id="3-2-Java对象头"><a href="#3-2-Java对象头" class="headerlink" title="3.2 Java对象头"></a>3.2 Java对象头</h2><p>在同步的时候是获取对象的monitor,即获取到对象的锁。那么对象的锁怎么理解？无非就是类似对对象的一个标志，那么这个标志就是存放在Java对象的对象头。Java对象头里的Mark Word里默认的存放的对象的Hashcode,分代年龄和锁标记位。32位JVM Mark Word默认存储结构为（注:java对象头以及下面的锁状态变化摘自《java并发编程的艺术》一书）： </p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-668194c20734e01f.png" alt="Mark Word存储结构"></p><p>如图在Mark Word会默认存放hasdcode，年龄值以及锁标志位等信息。</p><p>Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：<strong>无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态</strong>，这几个状态会随着竞争情况逐渐升级。<strong>锁可以升级但不能降级</strong>，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。对象的MarkWord变化为下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-4556662630b15159.png" alt="Mark Word状态变化"></p><h2 id="3-2-偏向锁"><a href="#3-2-偏向锁" class="headerlink" title="3.2 偏向锁"></a>3.2 偏向锁</h2><p>HotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。</p><blockquote><p><strong>偏向锁的获取</strong></p></blockquote><p>当一个线程访问同步块并获取锁时，会在<strong>对象头</strong>和<strong>栈帧中的锁记录</strong>里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程</p><blockquote><p><strong>偏向锁的撤销</strong></p></blockquote><p>偏向锁使用了一种<strong>等到竞争出现才释放锁</strong>的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。</p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-5b183494bd1e145d.png" alt="偏向锁撤销流程"></p><p>如图，偏向锁的撤销，需要等待<strong>全局安全点</strong>（在这个时间点上没有正在执行的字节码）。它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word<strong>要么</strong>重新偏向于其他线程，<strong>要么</strong>恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程。</p><p>下图线程1展示了偏向锁获取的过程，线程2展示了偏向锁撤销的过程。</p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-0b954fa67e8721c2.png" alt="偏向锁获取和撤销流程"></p><blockquote><p><strong>如何关闭偏向锁</strong></p></blockquote><p>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：<strong>-XX:BiasedLockingStartupDelay=0</strong>。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁：<strong>-XX:-UseBiasedLocking=false</strong>，那么程序默认会进入轻量级锁状态</p><h2 id="3-3-轻量级锁"><a href="#3-3-轻量级锁" class="headerlink" title="3.3 轻量级锁"></a>3.3 轻量级锁</h2><blockquote><p><strong>加锁</strong></p></blockquote><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中<strong>创建用于存储锁记录的空间</strong>，并将对象头中的Mark Word复制到锁记录中，官方称为<strong>Displaced Mark Word</strong>。然后线程尝试使用CAS<strong>将对象头中的Mark Word替换为指向锁记录的指针</strong>。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁</p><blockquote><p><strong>解锁</strong></p></blockquote><p>轻量级解锁时，会使用原子的CAS操作将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。下图是两个线程同时争夺锁，导致锁膨胀的流程图。</p><p><img src="https://upload-images.jianshu.io/upload_images/2615789-0c92d94dad8bdc27.png" alt="轻量级锁加锁解锁以及锁膨胀"></p><p>因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争。</p><h2 id="3-5-各种锁的比较"><a href="#3-5-各种锁的比较" class="headerlink" title="3.5 各种锁的比较"></a>3.5 各种锁的比较</h2><p><img src="https://upload-images.jianshu.io/upload_images/2615789-56647501fd77289f.png" alt="各种锁的对比"></p><h1 id="4-一个例子"><a href="#4-一个例子" class="headerlink" title="4. 一个例子"></a>4. 一个例子</h1><p>经过上面的理解，我们现在应该知道了该怎样解决了。更正后的代码为：</p><pre><code>public class SynchronizedDemo implements Runnable {    private static int count = 0;    public static void main(String[] args) {        for (int i = 0; i &lt; 10; i++) {            Thread thread = new Thread(new SynchronizedDemo());            thread.start();        }        try {            Thread.sleep(500);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println(&quot;result: &quot; + count);    }    @Override    public void run() {        synchronized (SynchronizedDemo.class) {            for (int i = 0; i &lt; 1000000; i++)                count++;        }    }}</code></pre><p>开启十个线程，每个线程在原值上累加1000000次，最终正确的结果为10X1000000=10000000，这里能够计算出正确的结果是因为在做累加操作时使用了同步代码块，这样就能保证每个线程所获得共享变量的值都是当前最新的值，如果不使用同步的话，就可能会出现A线程累加后，而B线程做累加操作有可能是使用原来的就值，即“脏值”。这样，就导致最终的计算结果不是正确的。而使用Syncnized就可能保证内存可见性，保证每个线程都是操作的最新值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;让你彻底理解Synchronized&quot;&gt;&lt;a href=&quot;#让你彻底理解Synchronized&quot; class=&quot;headerlink&quot; title=&quot;让你彻底理解Synchronized&quot;&gt;&lt;/a&gt;让你彻底理解Synchronized&lt;/h1&gt;&lt;h1 id=&quot;1-synchronized简介&quot;&gt;&lt;a href=&quot;#1-synchronized简介&quot; class=&quot;headerlink&quot; title=&quot;1. synchronized简介&quot;&gt;&lt;/a&gt;1. synchronized简介&lt;/h1&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://lame-lamb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>浅谈对JIT编译器的理解(转)</title>
    <link href="https://lame-lamb.github.io/2019/09/10/JIT%20compiler/"/>
    <id>https://lame-lamb.github.io/2019/09/10/JIT compiler/</id>
    <published>2019-09-10T09:09:16.000Z</published>
    <updated>2019-09-19T08:41:08.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是Just-In-Time编译器"><a href="#1-什么是Just-In-Time编译器" class="headerlink" title="1. 什么是Just In Time编译器?"></a>1. 什么是Just In Time编译器?</h1><h2 id="Hot-Spot-编译"><a href="#Hot-Spot-编译" class="headerlink" title="Hot Spot 编译"></a>Hot Spot 编译</h2><a id="more"></a><p> 当 JVM 执行代码时，它并不立即开始编译代码。这主要有两个原因：</p><p> 首先，如果这段代码本身在将来只会被执行一次，那么从本质上看，编译就是在浪费精力。因为将代码翻译成 java 字节码相对于编译这段代码并执行代码来说，要快很多。</p><p> 当 然，如果一段代码频繁的调用方法，或是一个循环，也就是这段代码被多次执行，那么编译就非常值得了。因此，编译器具有的这种权衡能力会首先执行解释后的代 码，然后再去分辨哪些方法会被频繁调用来保证其本身的编译。其实说简单点，就是 JIT 在起作用，我们知道，对于 Java 代码，刚开始都是被编译器编译成字节码文件，然后字节码文件会被交由 JVM 解释执行，所以可以说 Java 本身是一种半编译半解释执行的语言。Hot Spot VM 采用了 JIT compile 技术，将运行频率很高的字节码直接编译为机器指令执行以提高性能，所以当字节码被 JIT 编译为机器码的时候，要说它是编译执行的也可以。也就是说，运行时，部分代码可能由 JIT 翻译为目标机器指令（以 method 为翻译单位，还会保存起来，第二次执行就不用翻译了）直接执行。</p><p> 第二个原因是最优化，当 JVM 执行某一方法或遍历循环的次数越多，就会更加了解代码结构，那么 JVM 在编译代码的时候就做出相应的优化。</p><p> 我 们将在后面讲解这些优化策略，这里，先举一个简单的例子：我们知道 equals() 这个方法存在于每一个 Java Object 中（因为是从 Object class 继承而来）而且经常被覆写。当解释器遇到 b = obj1.equals(obj2) 这样一句代码，它则会查询 obj1 的类型从而得知到底运行哪一个 equals() 方法。而这个动态查询的过程从某种程度上说是很耗时的。</p><p> 在主流商用JVM（HotSpot、J9）中，Java程序一开始是通过解释器（Interpreter）进行解释执行的。当JVM发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“热点代码（Hot Spot Code）”，然后JVM会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为：即时编译器（Just In Time Compiler，JIT）</p><p> JIT编译器是“动态编译器”的一种，相对的“静态编译器”则是指的比如：C/C++的编译器</p><blockquote><p>JIT并不是JVM的必须部分，JVM规范并没有规定JIT必须存在，更没有限定和指导JIT。但是，JIT性能的好坏、代码优化程度的高低却是衡量一款JVM是否优秀的最关键指标之一，也是虚拟机中最核心且最能体现虚拟机技术水平的部分。</p></blockquote><hr><h1 id="2-编译器与解释器"><a href="#2-编译器与解释器" class="headerlink" title="2. 编译器与解释器"></a>2. 编译器与解释器</h1><p> 首先，不是所有JVM都采用编译器和解释器并存的架构，但主流商用虚拟机，都同时包含这两部分。</p><h2 id="2-1-配合过程"><a href="#2-1-配合过程" class="headerlink" title="2.1 配合过程"></a>2.1 配合过程</h2><ol><li>当程序需要迅速启动然后执行的时候，解释器可以首先发挥作用，编译器不运行从而省去编译时间，立即执行程序</li></ol><ol start="2"><li>在程序运行后，随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地代码之后，可以获得更高的执行效率</li></ol><ol start="3"><li>当程序运行环境中内存资源限制较大（如部分嵌入式系统中），可以使用解释执行来节约内存；反之，则可以使用编译执行来提升效率。</li></ol><ol start="4"><li><p>同时，解释器还可以作为编译器（C2才会激进优化）激进优化时的一个“逃生门”，让编译器根据概率选择一些大多数时候都能提升运行速度的优化手段，当激进优化假设不成立。如：加载了新类后，类型继承结构出现变化，出现“罕见陷阱（Uncommon Trap）”时，可以通过逆优化（Deoptimization）退回到解释状态继续执行<br>(部分没有解释器的虚拟机，也会采用不进行激进优化的C1编译器担任“逃生门”的角色)</p><p> <img src="https://img-blog.csdn.net/20160324193842966" alt="这里写图片描述"></p></li></ol><h2 id="2-2-解释器-Interpreter"><a href="#2-2-解释器-Interpreter" class="headerlink" title="2.2 解释器 - Interpreter"></a>2.2 解释器 - Interpreter</h2><p> Interpreter解释执行class文件，好像JavaScript执行引擎一样</p><p> 特殊的例子：</p><ul><li><p>最早的Sun Classic VM只有Interpreter</p></li><li><p>BEA JRockit VM则只有Compiler，但它主要面向服务端应用，部署在其上的应用不重点关注启动时间</p><h2 id="2-3-编译器-Compiler"><a href="#2-3-编译器-Compiler" class="headerlink" title="2.3 编译器 - Compiler"></a>2.3 编译器 - Compiler</h2><p>只说HotSpot JVM</p></li></ul><h3 id="1-C1和C2："><a href="#1-C1和C2：" class="headerlink" title="1. C1和C2："></a>1. C1和C2：</h3><p> HotSpot虚拟机内置了两个即时编译器，分别称为Client Compiler和Server Compiler，习惯上将前者称为C1，后者称为C2</p><h3 id="2-使用C1还是C2？"><a href="#2-使用C1还是C2？" class="headerlink" title="2. 使用C1还是C2？"></a>2. 使用C1还是C2？</h3><p> HotSpot默认采用解释器和其中一个编译器直接配合的方式工作，使用那个编译器取决于虚拟机运行的模式，HotSpot会根据自身版本和宿主机器硬件性能自动选择模式，用户也可以使用“-client”或”-server”参数去指定</p><ol><li>混合模式（Mixed Mode）<br>默认的模式，如上面描述的这种方式就是mixed mode</li></ol><ol start="2"><li>解释模式（Interpreted Mode）<br> 可以使用参数“-Xint”，在此模式下全部代码解释执行</li></ol><ol start="3"><li><p>编译模式（Compiled Mode）<br> 参数“-Xcomp”，此模式优先采用编译，但是无法编译时也会解释（在最新的HotSpot中此参数被取消）</p><p> 可以看到，我的JVM现在是mixed mode<br><img src="https://img-blog.csdn.net/20160324194757071" alt="这里写图片描述"></p></li></ol><h3 id="重要：↓"><a href="#重要：↓" class="headerlink" title="重要：↓"></a>重要：↓</h3><blockquote><p>在JDK1.7（1.7仅包括Server模式）之后，HotSpot就不是默认“采用解释器和其中一个编译器”配合的方式了，而是采用了分层编译，分层编译时C1和C2有可能同时工作</p></blockquote><hr><h1 id="3-分层编译"><a href="#3-分层编译" class="headerlink" title="3. 分层编译"></a>3. 分层编译</h1><h2 id="3-1-为什么要分层编译？"><a href="#3-1-为什么要分层编译？" class="headerlink" title="3.1 为什么要分层编译？"></a>3.1 为什么要分层编译？</h2><p> 由于编译器compile本地代码需要占用程序时间，要编译出优化程度更高的代码所花费的时间可能更长，且此时解释器还要替编译器收集性能监控信息，这对解释执行的速度也有影响</p><p> 所以，为了在程序启动响应时间与运行效率之间达到最佳平衡，HotSpot在JDK1.6中出现了分层编译（Tiered Compilation）的概念并在JDK1.7的Server模式JVM中作为默认策略被开启</p><h2 id="3-2-编译层-tier（或者叫级别）"><a href="#3-2-编译层-tier（或者叫级别）" class="headerlink" title="3.2 编译层 tier（或者叫级别）"></a>3.2 编译层 tier（或者叫级别）</h2><p> 分层编译根据编译器编译、优化的规模与耗时，划分了不同的编译层次（不只以下3种），包括：</p><ul><li>第0层，程序解释执行（没有编译），解释器不开启性能监控功能，可触发第1层编译。</li></ul><ul><li>第1层，也称C1编译，将字节码编译为本地代码，进行简单、可靠的优化，如有必要将加入性能监控的逻辑</li></ul><ul><li>第2层（或2层以上），也称为C2编译，也是将字节码编译为本地代码，但是会启用一些编译耗时较长的优化，甚至会根据性能监控信息进行一些不可靠的激进优化</li></ul><blockquote><p>实施分层编译后，C1和C2将会同时工作，许多代码会被多次编译，用C1获取更高的编译速度，用C2来获取更好的编译质量，且在解释执行的时候解释器也无须再承担收集性能监控信息的任务</p></blockquote><hr><h1 id="4-编译对象与触发条件"><a href="#4-编译对象与触发条件" class="headerlink" title="4. 编译对象与触发条件"></a>4. 编译对象与触发条件</h1><h2 id="1-谁被编译了？"><a href="#1-谁被编译了？" class="headerlink" title="1. 谁被编译了？"></a>1. 谁被编译了？</h2><p> 编译对象就是之前说的“热点代码”，它有两类：</p><ol><li><p>被多次调用的方法   </p><ul><li>一个方法被多次调用，理应称为热点代码，这种编译也是虚拟机中标准的JIT编译方式</li></ul></li><li><p>被多次执行的循环体   </p><ul><li>编译动作由循环体出发，但编译对象依然会以整个方法为对象；</li><li>这种编译方式由于编译发生在方法执行过程中，因此形象的称为：栈上替换（On Stack Replacement- OSR编译，即方法栈帧还在栈上，方法就被替换了）<h2 id="2-触发条件"><a href="#2-触发条件" class="headerlink" title="2. 触发条件"></a>2. 触发条件</h2></li></ul></li></ol><h3 id="1-综述"><a href="#1-综述" class="headerlink" title="1. 综述"></a>1. 综述</h3><p> 上面的方法和循环体都说“多次”，那么多少算多？换个说法就是编译的触发条件。</p><p> 判断一段代码是不是热点代码，是不是需要触发JIT编译，这样的行为称为：热点探测（Hot Spot Detection），有几种主流的探测方式：</p><ol><li>基于计数器的热点探测（Counter Based Hot Spot Detection）<br> 虚拟机会为每个方法（或每个代码块）建立计数器，统计执行次数，如果超过阀值那么就是热点代码。缺点是维护计数器开销。</li></ol><ol start="2"><li>基于采样的热点探测（Sample Based Hot Spot Detection）<br> 虚拟机会周期性检查各个线程的栈顶，如果某个方法经常出现在栈顶，那么就是热点代码。缺点是不精确。</li></ol><ol start="3"><li>基于踪迹的热点探测（Trace Based Hot Spot Detection）<br> Dalvik中的JIT编译器使用这种方式</li></ol><h3 id="2-HotSpot"><a href="#2-HotSpot" class="headerlink" title="2. HotSpot"></a>2. HotSpot</h3><p> HotSpot使用的是第1种，因此它为每个方法准备了两类计数器：方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter）</p><ol><li>方法计数器</li></ol><pre><code>* 默认阀值，在Client模式下是1500次，Server是10000次，可以通过参数“-XX:CompileThreshold”来设定* 当一个方法被调用时会首先检查是否存在被JIT编译过得版本，如果存在则使用此本地代码来执行；如果不存在，则将方法计数器+1，然后判断“方法计数器和回边计数器之和”是否超过阀值，如果是则会向编译器提交一个方法编译请求* 默认情况下，执行引擎并不会同步等待上面的编译完成，而是会继续解释执行。当编译完成后，此方法的调用入口地址会被系统自动改写为新的本地代码地址* 还有一点，热度是会衰减的，也就是说不是仅仅+，也会-，热度衰减动作是在虚拟机的GC执行时顺便进行的</code></pre><ol start="2"><li>回边计数器</li></ol><pre><code>* 回边，顾名思义，只有执行到大括号”}”时才算+1* 默认阀值，Client下13995，Server下10700* 它的调用逻辑和方法计数器差不多，只不过遇到回边指令时+1、超过阀值时会提交OSR编译请求以及这里没有热度衰减</code></pre><hr><h1 id="5-编译过程"><a href="#5-编译过程" class="headerlink" title="5. 编译过程"></a>5. 编译过程</h1><p> 编译过程是在后台线程（daemon）中完成的，可以通过参数“-XX:-BackgroundCompilation”来禁止后台编译，但此时执行线程就会同步等待编译完成才会执行程序</p><ol><li>Client Compiler<br> C1编译器是一个简单快速的三段式编译器，主要关注“局部性能优化”，放弃许多耗时较长的全局优化手段<br> 过程：class -&gt; 1. 高级中间代码 -&gt; 2. 低级中间代码 -&gt; 3. 机器代码</li><li>Server Compiler<br> C2是专门面向服务器应用的编译器，是一个充分优化过的高级编译器，几乎能达到GNU C++编译器使用-O2参数时的优化强度。<blockquote><p>使用参数“-XX:+PrintCompilation”会让虚拟机在JIT时把方法名称打印出来，如图：<br><img src="https://img-blog.csdn.net/20160325165430857" alt="这里写图片描述"></p></blockquote></li></ol><hr><h1 id="6-Java和C-C-的编译器对比"><a href="#6-Java和C-C-的编译器对比" class="headerlink" title="6. Java和C/C++的编译器对比"></a>6. Java和C/C++的编译器对比</h1><p> 这里不是比Java和C/C++谁快这种大坑问题，只是比较编译器（我认为开发效率上Java快，执行效率上C/C++快）</p><p> 这种对比代表了经典的即时编译器与静态编译期的对比，其实总体来说Java编译器有优有劣。主要就是动态编译时间压力大能做的优化少，还要做一些动态校验。而静态编译器无法实现一些开发上很有用的动态特性</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-什么是Just-In-Time编译器&quot;&gt;&lt;a href=&quot;#1-什么是Just-In-Time编译器&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是Just In Time编译器?&quot;&gt;&lt;/a&gt;1. 什么是Just In Time编译器?&lt;/h1&gt;&lt;h2 id=&quot;Hot-Spot-编译&quot;&gt;&lt;a href=&quot;#Hot-Spot-编译&quot; class=&quot;headerlink&quot; title=&quot;Hot Spot 编译&quot;&gt;&lt;/a&gt;Hot Spot 编译&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JIT编译器" scheme="https://lame-lamb.github.io/tags/JIT%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
  </entry>
  
</feed>
